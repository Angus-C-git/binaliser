#!/usr/bin/python3

from elftools.elf.sections import Symbol
from pwn import *
import subprocess
import sys
import os
from operator import getitem
from collections import OrderedDict
from pwnlib import timeout
import argparse

from pwnlib.asm import _objdump

import pprint

from pwnlib.rop import gadgets
from pwnlib.util.iters import pad
from colorama import Fore, Style
pp = pprint.PrettyPrinter(indent=4)


CHECK_SEC = 'checksec'
ROPPER = 'ropper'


RELRO   = "Full RELRO"
CANARY  = "Canary found"
NX      = "NX enabled"
PIE     = "PIE enabled"


# potential win function 
# strings to hunt for
WIN_VARIANTS = [
    'win',
	'winner',
 	'secret',
	'jump_to_me',
	'hidden',
    'pwnme',
    'pwn',
    'hackme',
    'hack_me',
    'winnerwinnerchickendinner',
    'chicken_dinner',
    'shell',
    'useful',
    'ret2win'
]


TARGET_BIN = None

# Lines to receive before
# timeout
RCV_BEFORE = 25

# UI
PAD_BASE = ' ' * 12
logging.disable()


def print_banner():
    """ print program banner """

    print(Fore.GREEN + '''
  ____  ____ ___ _   _    _    _     ___ ____  _____ ____   ____  
 / / / | __ )_ _| \ | |  / \  | |   |_ _/ ___|| ____|  _ \  \ \ \ 
/ / /  |  _ \| ||  \| | / _ \ | |    | |\___ \|  _| | |_) |  \ \ \   
\ \ \  | |_) | || |\  |/ ___ \| |___ | | ___) | |___|  _ <   / / /
 \_\_\ |____/___|_| \_/_/   \_\_____|___|____/|_____|_| \_\ /_/_/ 
    
    ''' + Style.RESET_ALL)


def print_help():
    """ print help """ 
    print(f'''

        usage :: {sys.argv[0]} <binary> [options]

        ::::::::::::::::::::::::: [options] :::::::::::::::::::::::::

        -h,  --help                 Displays this help menu
        -a,  --auto                 Automatically fuzz for offsets
        -gt, --gadget-threshold     Threshold for number of gadgets
                                    to use for ROP weights 
    ''')



def print_results(tactics):
    """ print results from analysis """
    tactics = OrderedDict(
        sorted(
            tactics.items(), 
            key = lambda x: getitem(x[1], 'weight'), 
            reverse=True
        )
    )

    # print common
    print(f"{'':12}[*] General Tactics\n")
    for strategy in tactics['common']['strategies']:
        print(f"{'':18} ‣ {strategy}")

    # tactics by weight
    print(f"\n{'':12}[*] Tactics By Weight\n")
    rank = 1
    for tactic in tactics:
        if tactic == 'common': continue
        print(f"\n{'':14} [{rank}] :: [{tactic}]\n")
        for strategy in tactics[tactic]['strategies']:
            print(f"{'':18} ‣ {strategy}")
        rank += 1


def get_buffer_path(sequence_file=None):
    """ attempt to get a path to the input to fuzz """ 
    if sequence_file is None:
        buffer_path = str(input("""
            Enter 'send, receive' sequence to reach buffer seperated by > characters and & to
            mark the target buffer, use * to recvall.
            
            For example:

            password,12345isthepassword>name: ,johnsmith>task: , &> list, *

            >> """
        )).strip('\n').split(">")
        print(buffer_path)
        return buffer_path
    
    with open(sequence_file, 'r') as f:
        buffer_path = f.read().split("\n")
        print(buffer_path)
        return buffer_path



def intelligent_fmtstr_fuzz(test_payload):
    """ 
    attempt to fuzz an indirect field for 
    offsets (W.I.P) 
    """
    proc = process(TARGET_BIN)
    
    global buffer_path

    try:
        for recv_send in buffer_path:
            print("send rec block :::", buffer_path)
            recv, send = recv_send.split(',')
            print("recv", recv, "send", send)
            if '&' not in send:
                proc.sendlineafter(recv, send)
            else:
                proc.sendlineafter(recv, test_payload)
            # if '*' in recv:
                
                

    except Exception as e:
        print('''
            Automatically detecting the offset failed
            likely because the input point to the binary
            is not simplistic or vulnerable.
        ''')
        print(f"{PAD_BASE}ERR :: {e}")      



def fuzz_fmtstr(test_payload):
    """ test fmtstring case """
    proc = process(TARGET_BIN)
    try:
        # Attempt to catch a simple prompt
        proc.recvlines(RCV_BEFORE, timeout=1.5)
        proc.sendline(test_payload)
        return proc.recvall(timeout=1.5)

    except Exception as e:
        print('''
            Automatically detecting the offset failed
            likely because the input point to the binary
            is not simplistic or vulnerable.
        ''')
        print(f"{PAD_BASE}ERR :: {e}")


def fuzz_offsets(path_mode=False):
    """ perform simple format string offset fuzz """
    print(f'''{Fore.LIGHTGREEN_EX}
        [>>] Fuzzing for offsets
    {Style.RESET_ALL}''')

    # :: Try to find offsets for both bof and fmt :: #
    if path_mode:
        global buffer_path
        buffer_path = get_buffer_path()
        fmtstr_fuzz = FmtStr(execute_fmt=intelligent_fmtstr_fuzz)
    else:
        try:
            fmtstr_fuzz = FmtStr(execute_fmt=fuzz_fmtstr)
            offset = fmtstr_fuzz.offset
            print(f"{'':12}Found possible offset for format str @ {Fore.GREEN}{hex(offset)}{Style.RESET_ALL}")
        except Exception as e:
            print('''
                Automatically detecting the offset for a format str 
                failed likely because the input point to the binary
                is not simplistic or vulnerable ...

                Note : This is expected if a return pointer offset was found.
            ''')
            print(f"{Fore.LIGHTRED_EX}{'':12}ERR :: {e}{Style.RESET_ALL}")


    offset_test = cyclic(1000)
    try:
        proc = process(TARGET_BIN)
        # Attempt to catch a simple prompt
        proc.recvlines(RCV_BEFORE, timeout=1.5)
        proc.sendline(offset_test)

        core = Coredump('./core')
        offset = cyclic_find(core.eip)
        print(f"{'':12}Found possible return pointer offset @ {Fore.GREEN}{hex(offset)}{Style.RESET_ALL}")
        
        # cleanup
        os.remove('./core')
        proc.close()
    except Exception as e:
        print('''
            Automatically detecting the offset for a BOF failed
            likely because the input point to the binary
            is not, simplistic, vulnerable or uses a canary ...

            Note : This is expected if a format string offset was found.
        ''')
        print(f"{Fore.LIGHTRED_EX}{'':12}ERR :: {e}, was the core dumped?{Style.RESET_ALL}")



def interpret_results(results, win, options):
    
    strategies = {
        'GOT_RW': 'Overwrite GOT Entry',
        'canary': 'Attempt to leak or bruteforce stack canary',
        'NX_BOF': 'Attempt return to win function',
        'shellcode': 'Attempt to execute shellcode in a stack buffer',
        'leak': 'Attempt to obtain a region leak such as an address on the stack',
        'win' : 'Attempt return to win function',
        'return_ptr': 'Linear overwrite of return pointer',
        'heap_overflow': 'Attempt to overflow chunks on the heap',
        'double_free': 'Attempt to leak heap data',
        'UAF': 'Attempt to writes to arbitrary memory',
        'function_hooks': 'Attempt to overwrite function hook',
        'struct_ptr': 'Attempt to switch out struct pointer for win'
    }

    tactics = {
        'heap': {
			'weight': 0,
			'strategies': []
        },
        'rop': {
            'weight': 0,
            'strategies': []
        },
        'bof': {
            'weight': 0,
            'strategies': []
        },
        'fmt_str': {
            'weight': 0,
            'strategies': []
        },
        'common': {
            'weight': 0,
            'strategies': []
        }
    }

    if (win):
        tactics['common']['strategies'].append(strategies['win'])

    # Memory protections disabled
    if (RELRO not in results[2]):
        tactics['fmt_str']['weight'] += 1
        tactics['fmt_str']['strategies'].append(strategies['GOT_RW'])
    if (CANARY not in results[3]):
        tactics['bof']['weight'] += 1
        tactics['bof']['strategies'].append(strategies['return_ptr'])
    if (NX not in results[4]):
        tactics['bof']['weight'] += 1
        tactics['bof']['strategies'].append(strategies['shellcode'])
    if (PIE not in results[5]):
        tactics['rop']['weight'] += 1
        tactics['heap']['weight'] += 1
    
    # Memory protections enabled
    if (RELRO in results[2]):
        tactics['fmt_str']['weight'] -= 1
        tactics['common']['strategies'].append(strategies['function_hooks'])
    if (CANARY in results[3]):
        tactics['bof']['strategies'].append(strategies['canary'])
        tactics['heap']['weight'] += 1
        if (win):
            tactics['heap']['strategies'].append(strategies['struct_ptr'])
    if (NX in results[4]):
        if (win):
            tactics['bof']['weight'] += 1
        else:
            tactics['bof']['weight'] -= 1
        
        tactics['rop']['weight'] += 1
        tactics['fmt_str']['weight'] += 1

    if (PIE in results[5]):
        tactics['common']['strategies'].append(strategies['leak'])
        tactics['heap']['strategies'].append(strategies['double_free'])

    print_results(tactics)
    if (options.auto):
        if (options.buff_path):
            fuzz_offsets(path_mode=True)
        else: fuzz_offsets()


def analyze(target_bin, options):
    # print_banner()
    global TARGET_BIN

    elf = ELF(target_bin, checksec=False)
    TARGET_BIN = target_bin

    for variant in WIN_VARIANTS:
        try:
            win_function = elf.symbols[variant]
            break
        except:
            win_function = None
        
    
    print(f'''{Fore.LIGHTGREEN_EX}
        [>>] Analysing {TARGET_BIN} 
     {Style.RESET_ALL}''')

    checksec_res = subprocess.run([CHECK_SEC, TARGET_BIN], capture_output=True, text=True)
    results = checksec_res.stderr.split('\n')

    for protection in range(1, 6):
        print(f"{'':8}{results[protection]}", end=None)

    if (win_function is not None):
        print(f"\n{'':12}Likely win function @ {Fore.GREEN}{hex(win_function)}{Style.RESET_ALL}")

    # run ropper cause inbuilt is ordinary  
    ropper_res = subprocess.run([ROPPER, '-f', TARGET_BIN], capture_output=True, text=True)
    num_gadgets = int(ropper_res.stdout[-20:-15])
    
    print(f"\n{'':12}Binary has {Fore.GREEN}{num_gadgets}{Style.RESET_ALL} unique gadgets")
    print(f"\n{'':8}{Fore.LIGHTGREEN_EX}[>>] Determining possible strategies\n{Style.RESET_ALL}")

    # TODO :: Add more metrics
    interpret_results(results, win_function is not None, options)
    print('\n')



if __name__ == '__main__':
    
    parser = argparse.ArgumentParser(
        description=print_banner(), 
        epilog='Happy hacking!',
        add_help=True
    )

    if (len(sys.argv) == 1): print_help()

    parser.add_argument(
        'binary',
        metavar = '<binary>',
        help    = 'Binary program to analyse' 
    )

    parser.add_argument(
        '-a', '--auto',
        action='store_true',
        dest='auto',
        help='Automatically fuzz for offsets'
    )

    parser.add_argument(
        '-bp', '--buffer-path',
        action='store_true',
        dest='buff_path',
        help='Sequence to reach buffer to automatically fuzz'
    )

    parser.add_argument(
        '-gt', '--gadget-threshold',
        action='store_true',
        dest='gadget_threshold',
        help='Threshold for number of gadgets to use for ROP weights'
    )

    args = parser.parse_args()
    analyze(args.binary, args)
