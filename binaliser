#!/usr/bin/python3

from pwn import *
import subprocess
import sys

CHECK_SEC = 'checksec'


RELRO   = "Full RELRO"
CANARY  = "Canary found"
NX      = "NX enabled"
PIE     = "PIE enabled"


def print_banner():
    print('''
          ____  ____ ___ _   _    _    _     ___ ____  _____ ____   ____  
         / / / | __ )_ _| \ | |  / \  | |   |_ _/ ___|| ____|  _ \  \ \ \ 
        / / /  |  _ \| ||  \| | / _ \ | |    | |\___ \|  _| | |_) |  \ \ \   
        \ \ \  | |_) | || |\  |/ ___ \| |___ | | ___) | |___|  _ <   / / /
         \_\_\ |____/___|_| \_/_/   \_\_____|___|____/|_____|_| \_\ /_/_/ 
    ''')


def interpret_results(results):
    
    metrics = {
        'rop': [],
        'bof': [],
        'fmt': [],
    }

    if (results[1]):
        pass
    if (results[2]):
        pass
    if (results[3]):
        pass
    if (results[4]):
        pass
    if (results[5]):
        pass


    


def analyze(target_bin, options=0):
    print_banner()
    
    print(f'''
        [>>] Analysing {target_bin} 
    ''')

    checksec_res = subprocess.run([CHECK_SEC, target_bin], capture_output=True, text=True)
    results = checksec_res.stderr.split('\n')

    for protection in range(1, 6):
        print(f'        {results[protection]}',end=None)

    print('\n       [>>] Determining possible strategies')

    # TODO :: Add more metrics
    interpret_results(results)


if __name__ == '__main__':
    
    if (len(sys.argv) < 2 or (len(sys.argv) > 2)):
        print_banner()

        print(f'''

            usage :: {sys.argv[0]} <file> [options]

            :::::::::::::::::: [options] ::::::::::::::::::

            -l, --lol       there are no options yet

        ''')
        exit(0)
    
    analyze(sys.argv[1])

